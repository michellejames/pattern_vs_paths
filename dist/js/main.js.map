{"version":3,"sources":["main.js"],"names":["console","log","fs","require","readFile","err","data","lines","split","integerN","parseInt","integerM","pattern","paths","i","push","j","length","cleanPath","removeSlashes","matches","compare","splitPattern","splitPaths","path","charAt","substr","slice"],"mappings":";;AAAAA,QAAQC,GAAR,CAAY,0BAAZ;;AAEA,IAAIC,KAAKC,QAAQ,IAAR,CAAT;AACAD,GAAGE,QAAH,CAAY,sBAAZ,EAAoC,MAApC,EAA4C,UAASC,GAAT,EAAcC,IAAd,EAAoB;AAC5D,MAAID,GAAJ,EAAS,MAAMA,GAAN;AACT;;AAEA,MAAIE,QAAQD,KAAKE,KAAL,CAAW,IAAX,CAAZ;;AAEA,MAAIC,WAAWC,SAASH,MAAM,CAAN,CAAT,CAAf,CAN4D,CAMzB;AACnC,MAAII,WAAWD,SAASH,MAAME,WAAW,CAAjB,CAAT,CAAf;;AAEA,MAAIG,UAAU,EAAd;AACA,MAAIC,QAAQ,EAAZ;;AAEA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKL,QAArB,EAA+BK,GAA/B,EAAoC;AACnCF,YAAQG,IAAR,CAAaR,MAAMO,CAAN,CAAb;AACA;;AAED,OAAK,IAAIE,IAAIP,WAAS,CAAtB,EAAyBO,KAAKP,WAAWE,QAAX,GAAqB,CAAnD,EAAsDK,GAAtD,EAA2D;AAC1DH,UAAME,IAAN,CAAWR,MAAMS,CAAN,CAAX;AACA;;AAED;AACA;;AAEA,OAAK,IAAIF,IAAIF,QAAQK,MAAR,GAAiB,CAA9B,EAAiCH,KAAK,CAAtC,EAAyCA,GAAzC,EAA8C;;AAE7C,SAAK,IAAIE,IAAIH,MAAMI,MAAN,GAAe,CAA5B,EAA+BD,KAAK,CAApC,EAAuCA,GAAvC,EAA4C;;AAE3C,UAAIE,YAAYC,cAAcN,MAAMG,CAAN,CAAd,CAAhB;;AAEA,UAAII,UAAUC,QAAQT,QAAQE,CAAR,CAAR,EAAoBI,SAApB,CAAd;;AAEA,UAAIE,OAAJ,EAAa;AACZpB,gBAAQC,GAAR,mCAA4CW,QAAQE,CAAR,CAA5C,aAA8DI,SAA9D;AACA;AACD;AACD;AACJ,CApCD;;AAuCA,SAASG,OAAT,CAAiBT,OAAjB,EAA0BC,KAA1B,EAAiC;;AAEhC,MAAIS,eAAeV,QAAQJ,KAAR,CAAc,GAAd,CAAnB;AACA,MAAIe,aAAaV,MAAML,KAAN,CAAY,GAAZ,CAAjB;AACA;;AAEA,MAAIc,aAAaL,MAAb,IAAuBM,WAAWN,MAAtC,EAA8C;AAC7C,WAAO,KAAP;AACA;;AAED,OAAK,IAAIH,IAAIQ,aAAaL,MAAb,GAAsB,CAAnC,EAAsCH,KAAK,CAA3C,EAA8CA,GAA9C,EAAmD;AAClD,QAAIQ,aAAaR,CAAb,KAAmB,GAAvB,EAA4B;AAC3B;AACA;;AAED,QAAIQ,aAAaR,CAAb,KAAmBS,WAAWT,CAAX,CAAvB,EAAsC;AACrC,aAAO,KAAP;AACA;AACD;;AAED,SAAO,IAAP;AACA;;AAED,SAASK,aAAT,CAAuBK,IAAvB,EAA6B;;AAE5B,MAAIA,KAAKC,MAAL,CAAY,CAAZ,KAAkB,GAAtB,EAA2B;AAC1BD,WAAOA,KAAKE,MAAL,CAAY,CAAZ,CAAP;AACA;;AAED,MAAIF,KAAKE,MAAL,CAAY,CAAC,CAAb,KAAmB,GAAvB,EAA4B;AAC3BF,WAAOA,KAAKG,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACA;;AAED,SAAOH,IAAP;AACA","file":"main.js","sourcesContent":["console.log(\"Hello World from app.js!\");\n\nvar fs = require('fs');\nfs.readFile('../../input_file.txt', 'utf8', function(err, data) {  \n    if (err) throw err;\n    // console.log(data);\n\n    var lines = data.split('\\n');\n\n    var integerN = parseInt(lines[0]); //20\n    var integerM = parseInt(lines[integerN + 1]);\n\n    var pattern = [];\n    var paths = [];\n\n    for (var i = 1; i <= integerN; i++) {\n    \tpattern.push(lines[i]);\n    }\n\n    for (var j = integerN+2; j <= integerN + integerM +1; j++) {\n    \tpaths.push(lines[j]);\n    }\n\n    //Algorithmic Complexity of two nested loops: O(n²).\n    //The inner loop is executed i times, for each value of i. The outer loop is executed n times. --> O(n²).\n    \n    for (var i = pattern.length - 1; i >= 0; i--) {\n\n    \tfor (var j = paths.length - 1; j >= 0; j--) {\n    \t\t\n    \t\tvar cleanPath = removeSlashes(paths[j]);\n\n    \t\tvar matches = compare(pattern[i], cleanPath);\n\n    \t\tif (matches) {\n    \t\t\tconsole.log(`pattern and path that match: ${pattern[i]} and ${cleanPath}`);\n    \t\t}\n    \t}\n    }\n});\n\n\nfunction compare(pattern, paths) {\n\n\tvar splitPattern = pattern.split(\",\");\n\tvar splitPaths = paths.split(\"/\");\n\t// console.log(splitPaths, splitPattern);\n\n\tif (splitPattern.length != splitPaths.length) {\n\t\treturn false;\n\t}\n\n\tfor (var i = splitPattern.length - 1; i >= 0; i--) {\n\t\tif (splitPattern[i] == \"*\") {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (splitPattern[i] != splitPaths[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nfunction removeSlashes(path) {\n\n\tif (path.charAt(0) == \"/\") {\n\t\tpath = path.substr(1);\n\t}\n\n\tif (path.substr(-1) == \"/\") {\n\t\tpath = path.slice(0, -1);\t\t\n\t}\n\n\treturn path;\n}\n\n"]}