{"version":3,"sources":["main.js"],"names":["console","log","pattern","patternLength","length","paths","pathLength","i","checkForSlash","charAt","updatedStartPath","substr","finalStartPath","slice","updatedEndPath","finalEndPath","replaceSlashes","replacedPath","replace","transformedStartPath","changedStartPath","changedEndPath","arraysEqual"],"mappings":"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","file":"main.js","sourcesContent":["console.log(\"Hello World from app.js!\");\n\nvar pattern = [\n\t\t\"*,2,3\",\n\t\t\"question, everything\",\n\t\t\"does, it, *\",\n\t\t\"mic, check\",\n\t\t\"a,b,c\",\n\t\t\"c,*,*\",\n\t\t\"5\",\n];\n\nvar patternLength = pattern.length;\n\nvar paths = [\n\t\t\"/1/2/3\",\n\t\t\"question/everything/you/hear\",\n\t\t\"does/\",\n\t\t\"mic/check\",\n\t\t\"/a/b/c/\",\n\t\t\"3\",\n\t\t\"c,5,y\",\n];\n\nvar pathLength = paths.length;\n\n\nfor (var i = paths.length - 1; i >= 0; i--) {\n\n\tfunction checkForSlash() {\n\t\t//Check if first letter is a slash\n\t\tif (paths[i].charAt(0) == \"/\") {\n\t\t\tvar updatedStartPath = paths[i].substr(1);\n\n\t\t\tif (updatedStartPath.substr(-1) == \"/\") {\n\t\t\t\tvar finalStartPath = updatedStartPath.slice(0, -1);\n\t\t\t\tconsole.log(finalStartPath);\n\t\t\t}\n\t\t} \n\n\t\t//Check if last letter is a slash\n\t\tif (paths[i].substr(-1) == \"/\") {\n\t\t\tvar updatedEndPath = paths[i].slice(0, -1);\n\t\t\t\n\t\t\tif (updatedEndPath.charAt(0) == \"/\") {\n\t\t\t\tvar finalEndPath = updatedEndPath.substr(1);\n\t\t\t\tconsole.log(finalEndPath);\n\t\t\t}\n\t\t}\n\t}\n\tcheckForSlash();\n\t\n\n\tfunction replaceSlashes() {\n\t\tvar replacedPath = paths[i].replace(/\\//g, \",\");\n\t\t// console.log(replacedPath);\n\n\t\t//Check if first letter is a comma\n\t\tif (replacedPath.charAt(0) == \",\") {\n\t\t\tvar transformedStartPath = replacedPath.substr(1);\n\t\t\t// console.log(transformedStartPath);\n\n\t\t\tif (transformedStartPath.substr(-1) == \",\") {\n\t\t\t\tvar changedStartPath = transformedStartPath.slice(0, -1);\n\t\t\t\tconsole.log(changedStartPath);\n\t\t\t}\n\t\t} \n\n\t\t//Check if last letter is a comma\n\t\tif (replacedPath.substr(-1) == \",\") {\n\t\t\tvar updatedEndPath = replacedPath.slice(0, -1);\n\t\t\t\n\t\t\tif (updatedEndPath.charAt(0) == \",\") {\n\t\t\t\tvar changedEndPath = updatedEndPath.substr(1);\n\t\t\t\tconsole.log(changedEndPath);\n\t\t\t}\n\t\t}\n\n\t\t\n\t}\n\treplaceSlashes();\n}\n\n\nfor (var i = pattern.length - 1; i >= 0; i--) {\n\n\tfunction arraysEqual(pattern, paths) {\n\t  if (pattern[i] === paths[i]) {\n\t  \tconsole.log(\"match\");\n\t  \treturn true;\n\t  } else {\n\t  \tconsole.log(\"no match\");\n\t  \treturn false;\n\t  }\n\t}\n\n\tarraysEqual(pattern, paths);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// for (var i = paths.length - 1; i >= 0; i--) {\n\n// \t//Replace slashes with commas\n// \t// replaceSlashes();\n\n// \t//Check if first letter is a slash\n// \tif (paths[i].charAt(0) == \"/\") {\n// \t\tvar updatedStartPath = paths[i].substr(1);\n// \t\t// console.log(updatedStartPath);\n// \t}\n\n// \t//Check if last letter is a slash\n// \tif (paths[i].substr(-1) == \"/\") {\n// \t\tvar updatedEndPath = paths[i].slice(0, -1);\n// \t\t// console.log(updatedEndPath);\n// \t}\n\n// \t// checkForMatch();\n\n// \tfunction arraysEqual(pattern, paths) {\n// \t  if (pattern[i] === paths[i]) return true;\n// \t  if (pattern[i] == null || paths[i] == null) return false;\n// \t  if (pattern[i].length != paths[i].length) return false;\n\n// \t  return true;\n// \t}\n\n// \tconsole.log(arraysEqual(pattern, paths));\n\n// }\n\n\n// function replaceSlashes() {\n// \tpaths[i].find(/\\//g, \",\");\n// \tconsole.log(replaceSlashes);\n// }\n\n// function checkForMatch() {\n// \tif (paths[i] == pattern[i]) {\n// \t\tconsole.log(pattern[i]);\n// \t}\n// }\n\n\n\n\n// function findPath(pattern) {\n//     var patternArray = pattern.split(',');\n//     var topCount = 0;\n//     var highestPath;\n//     for (var i = paths.length - 1; i >= 0; i--) {\n//         var arrayPath = paths[i].split('/');\n//         for (var i = arrayPath.length - 1; i >= 0; i--) {\n//             var count = 0;\n//             if(patternArray[i]) {\n//                 if( arrayPath[i] == patternArray[i] || patternArray[i] == '*') {\n//                     count++;\n//                 }\n//                 console.log(arrayPath[i] + ',' + patternArray[i]);\n//             } else  {\n//                 break\n//             }\n//             if (count > topCount) {\n//                 topCount = count;\n//                 thighestPath = arrayPath.toString();\n//             }\n//         }\n//     }\n//     console.log(highestPath);\n// }\n\n// findPath(\"a,b,c\");\n\n\n"]}